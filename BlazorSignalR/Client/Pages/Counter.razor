@page "/counter"

<PageTitle>Counter</PageTitle>

@using BlazorSignalR.Client.Utilities;
@using BlazorSignalR.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-4 offset-md-4">
        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-outline-primary position-relative" @onclick="@(() => UpdateNotificationType(NotificationType.GIFT))">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gift" viewBox="0 0 16 16">
                        <path d="M3 2.5a2.5 2.5 0 0 1 5 0 2.5 2.5 0 0 1 5 0v.006c0 .07 0 .27-.038.494H15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v7.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 14.5V7a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h2.038A2.968 2.968 0 0 1 3 2.506V2.5zm1.068.5H7v-.5a1.5 1.5 0 1 0-3 0c0 .085.002.274.045.43a.522.522 0 0 0 .023.07zM9 3h2.932a.56.56 0 0 0 .023-.07c.043-.156.045-.345.045-.43a1.5 1.5 0 0 0-3 0V3zM1 4v2h6V4H1zm8 0v2h6V4H9zm5 3H9v8h4.5a.5.5 0 0 0 .5-.5V7zm-7 8V7H2v7.5a.5.5 0 0 0 .5.5H7z" />
                    </svg>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary border border-light rounded-circle">
                        @GiftCount
                        <span class="visually-hidden">unread messages</span>
                    </span>
                </button>
            </div>

            <div class="col">
                <button type="button" class="btn btn-outline-success position-relative" @onclick="@(() => UpdateNotificationType(NotificationType.BELL))">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bell" viewBox="0 0 16 16">
                        <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z" />
                    </svg>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success border border-light rounded-circle">
                        @BellCount
                        <span class="visually-hidden">unread messages</span>
                    </span>
                </button>
            </div>

            <div class="col">
                <button type="button" class="btn btn-outline-danger position-relative" @onclick="@(() => UpdateNotificationType(NotificationType.TRASH))">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16">
                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                    </svg>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger border border-light rounded-circle">
                        @TrashCount
                        <span class="visually-hidden">unread messages</span>
                    </span>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection { get; set; }

    public int GiftCount { get; set; }
    public int BellCount { get; set; }
    public int TrashCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationmsg"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<NotificationType>("ReceiveNotificationType", type =>
        {
            switch (type)
            {
                case NotificationType.BELL:
                    BellCount++;
                    break;
                case NotificationType.GIFT:
                    GiftCount++;
                    break;
                case NotificationType.TRASH:
                    TrashCount++;
                    break;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection!.State == HubConnectionState.Connected;

    Task SenNotificationType(NotificationType type) => hubConnection!.SendAsync("SenNotificationType", type);

    public async Task UpdateNotificationType(NotificationType type)
    {
        if (IsConnected)
        {
            await SenNotificationType(type);
        }
    }

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }

}
