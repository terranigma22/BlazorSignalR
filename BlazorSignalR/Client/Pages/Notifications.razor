@page "/notificationmsg"
@using BlazorSignalR.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IRepository repository

<PageTitle>Notifications SignalR</PageTitle>


<form @onsubmit="SendNotification">
    <div class="row">
        <div class="form-group">
            <input type="text" class="form-control" placeholder="Write a message" @bind="Msg"/>
        </div>
        <br />
        <div class="form-group">
            <button class="btn btn-primary form-control" type="submit">Send Notification</button>
        </div>
    </div>
</form>

<hr />
<div>
    @if (Messages is null || Messages.Count == 0)
    {
        <p>Connected: @IsConnected</p>   
    }
    else
    {
        <ul>
            @foreach (var item in Messages)
            {
                <li>@item.Message</li>
            }
        </ul>
    }
</div>
<hr />
<div class="form-group">
   <button class="btn btn-danger form-control" @onclick="RemoveNotifications">Remove All Messagess</button>
</div>

@code {
    private HubConnection? hubConnection { get; set; }
    private List<NotificationMsg> Messages { get; set; } = new List<NotificationMsg>();
    public string Msg { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/notificationmsg"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On("ReceiveNotificationMsg", async () =>
        {
            await GetNotifications();
        });

        await hubConnection.StartAsync();

        await GetNotifications();
    }

    public bool IsConnected => hubConnection!.State == HubConnectionState.Connected;

    Task sendNotificationMsg() => hubConnection!.SendAsync("SenNotificationMsg");

    public async Task GetNotifications()
    {
        var response = await repository.Get<List<NotificationMsg>>("api/notifications");
        if (IsConnected)
        {
            Messages = response.Response!;
            StateHasChanged();
        }
    }

    public async Task RemoveNotifications()
    {
        var response = await repository.Delete<object>("api/notifications");
        if (response.Error)
        {
            var msgError = await response.GetError();
            return;
        }
        await sendNotificationMsg();
    }

    public async Task SendNotification(EventArgs e)
    {
        if (IsConnected)
        {
            var httpResponse = await repository.Post("api/notifications", Msg);
            if (httpResponse.Error)
            {
                var msgError = await httpResponse.GetError();
                return;
            }
            await sendNotificationMsg();
            Msg = string.Empty;
        }
    }

    public void Dispose()
    {
        _ = hubConnection!.DisposeAsync();
    }

}
